// Code generated by protoc-gen-go. DO NOT EDIT.
// source: image_info.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//for uploading image
type UploadImageRequest struct {
	// Types that are valid to be assigned to Data:
	//	*UploadImageRequest_Info
	//	*UploadImageRequest_Chunkdata
	Data                 isUploadImageRequest_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UploadImageRequest) Reset()         { *m = UploadImageRequest{} }
func (m *UploadImageRequest) String() string { return proto.CompactTextString(m) }
func (*UploadImageRequest) ProtoMessage()    {}
func (*UploadImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8085f4b4731c381e, []int{0}
}

func (m *UploadImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadImageRequest.Unmarshal(m, b)
}
func (m *UploadImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadImageRequest.Marshal(b, m, deterministic)
}
func (m *UploadImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadImageRequest.Merge(m, src)
}
func (m *UploadImageRequest) XXX_Size() int {
	return xxx_messageInfo_UploadImageRequest.Size(m)
}
func (m *UploadImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadImageRequest proto.InternalMessageInfo

type isUploadImageRequest_Data interface {
	isUploadImageRequest_Data()
}

type UploadImageRequest_Info struct {
	Info *ImageInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type UploadImageRequest_Chunkdata struct {
	Chunkdata []byte `protobuf:"bytes,2,opt,name=chunkdata,proto3,oneof"`
}

func (*UploadImageRequest_Info) isUploadImageRequest_Data() {}

func (*UploadImageRequest_Chunkdata) isUploadImageRequest_Data() {}

func (m *UploadImageRequest) GetData() isUploadImageRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UploadImageRequest) GetInfo() *ImageInfo {
	if x, ok := m.GetData().(*UploadImageRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (m *UploadImageRequest) GetChunkdata() []byte {
	if x, ok := m.GetData().(*UploadImageRequest_Chunkdata); ok {
		return x.Chunkdata
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UploadImageRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UploadImageRequest_Info)(nil),
		(*UploadImageRequest_Chunkdata)(nil),
	}
}

type ImageInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ImageType            string   `protobuf:"bytes,2,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageInfo) Reset()         { *m = ImageInfo{} }
func (m *ImageInfo) String() string { return proto.CompactTextString(m) }
func (*ImageInfo) ProtoMessage()    {}
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8085f4b4731c381e, []int{1}
}

func (m *ImageInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageInfo.Unmarshal(m, b)
}
func (m *ImageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageInfo.Marshal(b, m, deterministic)
}
func (m *ImageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageInfo.Merge(m, src)
}
func (m *ImageInfo) XXX_Size() int {
	return xxx_messageInfo_ImageInfo.Size(m)
}
func (m *ImageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ImageInfo proto.InternalMessageInfo

func (m *ImageInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ImageInfo) GetImageType() string {
	if m != nil {
		return m.ImageType
	}
	return ""
}

type UploadImageResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size                 uint32   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadImageResponse) Reset()         { *m = UploadImageResponse{} }
func (m *UploadImageResponse) String() string { return proto.CompactTextString(m) }
func (*UploadImageResponse) ProtoMessage()    {}
func (*UploadImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8085f4b4731c381e, []int{2}
}

func (m *UploadImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadImageResponse.Unmarshal(m, b)
}
func (m *UploadImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadImageResponse.Marshal(b, m, deterministic)
}
func (m *UploadImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadImageResponse.Merge(m, src)
}
func (m *UploadImageResponse) XXX_Size() int {
	return xxx_messageInfo_UploadImageResponse.Size(m)
}
func (m *UploadImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadImageResponse proto.InternalMessageInfo

func (m *UploadImageResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadImageResponse) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ImageList struct {
	Images               []*ImageInfo `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ImageList) Reset()         { *m = ImageList{} }
func (m *ImageList) String() string { return proto.CompactTextString(m) }
func (*ImageList) ProtoMessage()    {}
func (*ImageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8085f4b4731c381e, []int{3}
}

func (m *ImageList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageList.Unmarshal(m, b)
}
func (m *ImageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageList.Marshal(b, m, deterministic)
}
func (m *ImageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageList.Merge(m, src)
}
func (m *ImageList) XXX_Size() int {
	return xxx_messageInfo_ImageList.Size(m)
}
func (m *ImageList) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageList.DiscardUnknown(m)
}

var xxx_messageInfo_ImageList proto.InternalMessageInfo

func (m *ImageList) GetImages() []*ImageInfo {
	if m != nil {
		return m.Images
	}
	return nil
}

func init() {
	proto.RegisterType((*UploadImageRequest)(nil), "proto.UploadImageRequest")
	proto.RegisterType((*ImageInfo)(nil), "proto.ImageInfo")
	proto.RegisterType((*UploadImageResponse)(nil), "proto.UploadImageResponse")
	proto.RegisterType((*ImageList)(nil), "proto.ImageList")
}

func init() { proto.RegisterFile("image_info.proto", fileDescriptor_8085f4b4731c381e) }

var fileDescriptor_8085f4b4731c381e = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x6d, 0xb5, 0x92, 0x74, 0xd0, 0x84, 0x8c, 0x17, 0x6c, 0x94, 0x90, 0x1e, 0x4c, 0x4f, 0x25,
	0xc1, 0x78, 0x94, 0x83, 0x27, 0x48, 0x3c, 0x2d, 0xea, 0xd5, 0x2c, 0x30, 0xd4, 0x46, 0xd8, 0x5d,
	0xbb, 0x5b, 0x0d, 0xfe, 0x18, 0x7f, 0xab, 0xe9, 0x2c, 0x7e, 0x10, 0x39, 0xcd, 0xec, 0x7b, 0x33,
	0x6f, 0xde, 0xec, 0x40, 0xa7, 0x5c, 0xcb, 0x82, 0x9e, 0x4a, 0xb5, 0xd4, 0xb9, 0xa9, 0xb4, 0xd3,
	0x78, 0xc4, 0x21, 0xe9, 0x15, 0x5a, 0x17, 0x2b, 0x1a, 0xf0, 0x6b, 0x56, 0x2f, 0x07, 0xef, 0x95,
	0x34, 0x86, 0x2a, 0xeb, 0xcb, 0xd2, 0x05, 0xe0, 0x83, 0x59, 0x69, 0xb9, 0x98, 0x34, 0x02, 0x82,
	0x5e, 0x6b, 0xb2, 0x0e, 0x2f, 0x21, 0x6a, 0xa4, 0xba, 0x61, 0x3f, 0xcc, 0xda, 0xc3, 0x8e, 0xaf,
	0xcd, 0xb9, 0x64, 0xa2, 0x96, 0x7a, 0x1c, 0x08, 0xe6, 0xb1, 0x07, 0xf1, 0xfc, 0xb9, 0x56, 0x2f,
	0x0b, 0xe9, 0x64, 0xf7, 0xa0, 0x1f, 0x66, 0xc7, 0xe3, 0x40, 0xfc, 0x42, 0xb7, 0x2d, 0x88, 0x9a,
	0x98, 0x8e, 0x20, 0xfe, 0x69, 0x46, 0x84, 0x48, 0xc9, 0x35, 0xb1, 0x78, 0x2c, 0x38, 0xc7, 0x0b,
	0x00, 0xbf, 0x81, 0xdb, 0x18, 0x62, 0xa5, 0x58, 0xc4, 0x8c, 0xdc, 0x6f, 0x0c, 0xa5, 0x37, 0x70,
	0xba, 0xe3, 0xd2, 0x1a, 0xad, 0x2c, 0xed, 0x55, 0x42, 0x88, 0x6c, 0xf9, 0xe1, 0x35, 0x4e, 0x04,
	0xe7, 0xe9, 0xf5, 0x76, 0xfc, 0x5d, 0x69, 0x1d, 0x66, 0xd0, 0x62, 0x61, 0xdb, 0x0d, 0xfb, 0x87,
	0xfb, 0xb6, 0x13, 0x5b, 0x7e, 0xf8, 0x19, 0x02, 0x32, 0xea, 0x67, 0x4f, 0xa9, 0x7a, 0x2b, 0xe7,
	0x84, 0x63, 0x68, 0xff, 0x31, 0x83, 0x67, 0xdb, 0xfe, 0xff, 0xdf, 0x98, 0x24, 0xfb, 0x28, 0xef,
	0x3d, 0x0d, 0xb2, 0x10, 0x47, 0x00, 0x8d, 0x25, 0x26, 0x2c, 0x9e, 0xe7, 0xfe, 0x56, 0xf9, 0xf7,
	0xad, 0xf2, 0xa9, 0xab, 0x4a, 0x55, 0x3c, 0xca, 0x55, 0x4d, 0xc9, 0x8e, 0xcd, 0xa6, 0x2b, 0x0d,
	0x66, 0x2d, 0x86, 0xae, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf8, 0xca, 0x07, 0xc9, 0xfe, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImageUploadServiceClient is the client API for ImageUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageUploadServiceClient interface {
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (ImageUploadService_UploadImageClient, error)
	ListImages(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*ImageList, error)
}

type imageUploadServiceClient struct {
	cc *grpc.ClientConn
}

func NewImageUploadServiceClient(cc *grpc.ClientConn) ImageUploadServiceClient {
	return &imageUploadServiceClient{cc}
}

func (c *imageUploadServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (ImageUploadService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImageUploadService_serviceDesc.Streams[0], "/proto.ImageUploadService/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageUploadServiceUploadImageClient{stream}
	return x, nil
}

type ImageUploadService_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type imageUploadServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *imageUploadServiceUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageUploadServiceUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageUploadServiceClient) ListImages(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*ImageList, error) {
	out := new(ImageList)
	err := c.cc.Invoke(ctx, "/proto.ImageUploadService/ListImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageUploadServiceServer is the server API for ImageUploadService service.
type ImageUploadServiceServer interface {
	UploadImage(ImageUploadService_UploadImageServer) error
	ListImages(context.Context, *wrappers.StringValue) (*ImageList, error)
}

// UnimplementedImageUploadServiceServer can be embedded to have forward compatible implementations.
type UnimplementedImageUploadServiceServer struct {
}

func (*UnimplementedImageUploadServiceServer) UploadImage(srv ImageUploadService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (*UnimplementedImageUploadServiceServer) ListImages(ctx context.Context, req *wrappers.StringValue) (*ImageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}

func RegisterImageUploadServiceServer(s *grpc.Server, srv ImageUploadServiceServer) {
	s.RegisterService(&_ImageUploadService_serviceDesc, srv)
}

func _ImageUploadService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageUploadServiceServer).UploadImage(&imageUploadServiceUploadImageServer{stream})
}

type ImageUploadService_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type imageUploadServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *imageUploadServiceUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageUploadServiceUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImageUploadService_ListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageUploadServiceServer).ListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ImageUploadService/ListImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageUploadServiceServer).ListImages(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageUploadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ImageUploadService",
	HandlerType: (*ImageUploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListImages",
			Handler:    _ImageUploadService_ListImages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _ImageUploadService_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "image_info.proto",
}
